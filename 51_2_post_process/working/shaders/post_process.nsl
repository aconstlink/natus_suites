
//***************************************************************************
config post.box
{
    vertex_shader
    {
        in vec3_t pos : position ;
        in vec2_t tx : texcoord ;

        out vec4_t pos : position ;
        out vec2_t tx : texcoord ;

        void main()
        {
            out.tx = in.tx ;
            out.pos = vec4_t( sign( in.pos.xy ), 0.0, 1.0 ) ;
        }
    }

    pixel_shader
    {
        in vec2_t tx : texcoord ;
        out vec4_t color : color0 ;
        tex2d_t u_tex_0 ;

        void main()
        {
           out.color = rt_texture_offset( u_tex_0, in.tx, vec2i_t(-1,-1) ) ;
           out.color += rt_texture_offset( u_tex_0, in.tx, vec2i_t(-1,0) ) ;
           out.color += rt_texture_offset( u_tex_0, in.tx, vec2i_t(-1,1) ) ;
           out.color += rt_texture_offset( u_tex_0, in.tx, vec2i_t(0,1) ) ;
           out.color += rt_texture_offset( u_tex_0, in.tx, vec2i_t(0,0) ) ;
           out.color += rt_texture_offset( u_tex_0, in.tx, vec2i_t(0,-1) ) ;
           out.color += rt_texture_offset( u_tex_0, in.tx, vec2i_t(1,1) ) ;
           out.color += rt_texture_offset( u_tex_0, in.tx, vec2i_t(1,0) ) ;
           out.color += rt_texture_offset( u_tex_0, in.tx, vec2i_t(1,-1) ) ;
           out.color = out.color / 9.0 ;
        }
   }
}

//***************************************************************************
config post.gauss
{
    vertex_shader
    {
        in vec3_t pos : position ;
        in vec2_t tx : texcoord ;

        out vec4_t pos : position ;
        out vec2_t tx : texcoord ;

        void main()
        {
            out.tx = in.tx ;
            out.pos = vec4_t( sign( in.pos.xy ), 0.0, 1.0 ) ;
        }
    }

    pixel_shader
    {
        in vec2_t tx : texcoord ;
        out vec4_t color : color0 ;
        tex2d_t u_tex_0 ;

        void main()
        {
            float_t c0 = 1.0 / 16.0 ;
            float_t c1 = 2.0 / 16.0 ;
            float_t c2 = 4.0 / 16.0 ;

            out.color = rt_texture_offset( u_tex_0, in.tx, vec2i_t(-1,-1) ) * c0 ;
            out.color += rt_texture_offset( u_tex_0, in.tx, vec2i_t(-1,0) ) * c1 ;
            out.color += rt_texture_offset( u_tex_0, in.tx, vec2i_t(-1,1) ) * c0 ;
            out.color += rt_texture_offset( u_tex_0, in.tx, vec2i_t(0,1) ) * c1 ;
            out.color += rt_texture_offset( u_tex_0, in.tx, vec2i_t(0,0) ) * c2 ;
            out.color += rt_texture_offset( u_tex_0, in.tx, vec2i_t(0,-1) ) * c1;
            out.color += rt_texture_offset( u_tex_0, in.tx, vec2i_t(1,1) ) * c0 ;
            out.color += rt_texture_offset( u_tex_0, in.tx, vec2i_t(1,0) ) * c1 ;
            out.color += rt_texture_offset( u_tex_0, in.tx, vec2i_t(1,-1) ) * c0 ;
        }
   }
}

//***************************************************************************
config post.color_grade
{
    vertex_shader
    {
        in vec3_t pos : position ;
        in vec2_t tx : texcoord ;

        out vec4_t pos : position ;
        out vec2_t tx : texcoord ;

        void main()
        {
            out.tx = in.tx ;
            out.pos = vec4_t( sign( in.pos.xy ), 0.0, 1.0 ) ;
        }
    }

    pixel_shader
    {
        in vec2_t tx : texcoord ;
        out vec4_t color : color0 ;
        tex2d_t u_tex_0 ;

        vec4_t u_dark_color ;
        vec4_t u_light_color ;

        void main()
        {
            out.color = rt_texture( u_tex_0, in.tx ) ;

            float_t light_pitch = dot( out.color.xyz, vec3_t(1.0,1.0,1.0) ) ;
            float_t dark_pitch = 1.0 - light_pitch ; //dot( out.color.xyz, vec3_t(0.1,0.1,0.1) ) ;

            vec4_t light_color = out.color + u_light_color ;
            vec4_t dark_color = out.color + u_dark_color ;
            out.color =  mix( out.color, dark_color, dark_pitch) ;
            out.color =  mix( out.color, light_color, light_pitch ) ;
        }
   }
}

//***************************************************************************
config post.sobel
{
    vertex_shader
    {
        in vec3_t pos : position ;
        in vec2_t tx : texcoord ;

        out vec4_t pos : position ;
        out vec2_t tx : texcoord ;

        void main()
        {
            out.tx = in.tx ;
            out.pos = vec4_t( sign( in.pos.xy ), 0.0, 1.0 ) ;
        }
    }

    pixel_shader
    {
        in vec2_t tx : texcoord ;
        out vec4_t color : color0 ;

        tex2d_t u_tex_0 ;
        uint_t u_sobel_type ;

        void main()
        {
            // x direction
            if( u_sobel_type == 0u )
            {
                out.color = rt_texture_offset( u_tex_0, in.tx, vec2i_t(-1,-1) ) * 0.5 ;
                out.color += rt_texture_offset( u_tex_0, in.tx, vec2i_t(-1,0) ) * 1.0;
                out.color += rt_texture_offset( u_tex_0, in.tx, vec2i_t(-1,1) ) * 0.5 ;
                out.color += rt_texture_offset( u_tex_0, in.tx, vec2i_t(1,1) ) * -0.5 ;
                out.color += rt_texture_offset( u_tex_0, in.tx, vec2i_t(1,0) ) * -1.0 ;
                out.color += rt_texture_offset( u_tex_0, in.tx, vec2i_t(1,-1) ) * -0.5 ;
            }
            // y direction
            else if( u_sobel_type == 1u )
            {
                out.color = rt_texture_offset( u_tex_0, in.tx, vec2i_t(-1,-1) ) * -0.5 ;
                out.color += rt_texture_offset( u_tex_0, in.tx, vec2i_t(-1,1) ) * 0.5 ;
                out.color += rt_texture_offset( u_tex_0, in.tx, vec2i_t(0,1) ) * 1.0 ;
                out.color += rt_texture_offset( u_tex_0, in.tx, vec2i_t(0,-1) ) * -1.0 ;
                out.color += rt_texture_offset( u_tex_0, in.tx, vec2i_t(1,1) ) * 0.5 ; 
                out.color += rt_texture_offset( u_tex_0, in.tx, vec2i_t(1,-1) ) * -0.5 ;
            }
            else if( u_sobel_type == 2u )
            {
                float_t coeff = 3.0 / 10.0 ;
                out.color = rt_texture_offset( u_tex_0, in.tx, vec2i_t(-1,-1) ) * coeff ;
                out.color += rt_texture_offset( u_tex_0, in.tx, vec2i_t(-1,0) ) * 1.0;
                out.color += rt_texture_offset( u_tex_0, in.tx, vec2i_t(-1,1) ) * coeff ;
                out.color += rt_texture_offset( u_tex_0, in.tx, vec2i_t(1,1) ) * -coeff ;
                out.color += rt_texture_offset( u_tex_0, in.tx, vec2i_t(1,0) ) * -1.0 ;
                out.color += rt_texture_offset( u_tex_0, in.tx, vec2i_t(1,-1) ) * -coeff ;
            }
            else if( u_sobel_type == 3u )
            {
                float_t coeff = 3.0 / 10.0 ;
                out.color = rt_texture_offset( u_tex_0, in.tx, vec2i_t(-1,-1) ) * -coeff ;
                out.color += rt_texture_offset( u_tex_0, in.tx, vec2i_t(-1,1) ) * coeff ;
                out.color += rt_texture_offset( u_tex_0, in.tx, vec2i_t(0,1) ) * 1.0 ;
                out.color += rt_texture_offset( u_tex_0, in.tx, vec2i_t(0,-1) ) * -1.0 ;
                out.color += rt_texture_offset( u_tex_0, in.tx, vec2i_t(1,1) ) * coeff ; 
                out.color += rt_texture_offset( u_tex_0, in.tx, vec2i_t(1,-1) ) * -coeff ;
            }
        }
    }
}

//***************************************************************************
config post.laplace
{
    vertex_shader
    {
        in vec3_t pos : position ;
        in vec2_t tx : texcoord ;

        out vec4_t pos : position ;
        out vec2_t tx : texcoord ;

        void main()
        {
            out.tx = in.tx ;
            out.pos = vec4_t( sign( in.pos.xy ), 0.0, 1.0 ) ;
        }
    }

    pixel_shader
    {
        in vec2_t tx : texcoord ;
        out vec4_t color : color0 ;
        tex2d_t u_tex_0 ;

        void main()
        {
            out.color = rt_texture_offset( u_tex_0, in.tx, vec2i_t(-1,0) ) * 0.25 ;
            out.color += rt_texture_offset( u_tex_0, in.tx, vec2i_t(0,1) ) * -0.25 ;
            out.color += rt_texture_offset( u_tex_0, in.tx, vec2i_t(0,0) ) * -1.0;
            out.color += rt_texture_offset( u_tex_0, in.tx, vec2i_t(0,-1) ) * 0.25;
            out.color += rt_texture_offset( u_tex_0, in.tx, vec2i_t(1,0) ) * 0.25 ;

        }
    }
}

//***************************************************************************
config post.map
{
    vertex_shader
    {
        in vec3_t pos : position ;
        in vec2_t tx : texcoord ;

        out vec4_t pos : position ;
        out vec2_t tx : texcoord ;

        void main()
        {
            out.tx = in.tx ;
            out.pos = vec4_t( sign( in.pos.xy ), 0.0, 1.0 ) ;
        }
    }

    pixel_shader
    {
        in vec2_t tx : texcoord ;
        out vec4_t color : color0 ;

        tex2d_t u_tex_0 ;
        tex2d_t u_tex_1 ;

        float_t u_split ;

        void main()
        {
            out.color = rt_texture( u_tex_1, in.tx ) ;

            if( in.tx.x < u_split ) out.color = rt_texture( u_tex_0, in.tx ) ;
            if( in.tx.x > (u_split -0.001) && in.tx.x < (u_split+0.001) ) out.color = as_vec4( 1.0 ) ;
        }
    }
}