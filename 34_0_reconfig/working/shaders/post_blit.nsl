config post_blit
{
    vertex_shader
    {
        // the order must match the geometry 
        // attribute binding order
        in vec3_t pos : position ;
        in vec2_t tx : texcoord ;

        out vec4_t pos : position ;
        out vec2_t tx : texcoord ;

        void main()
        {
            out.tx = in.tx ;
            out.pos = vec4_t( sign( in.pos.xy ), 0.0, 1.0 ) ;
        }
    }

    pixel_shader
    {
        in vec2_t tx : texcoord ;
        out vec4_t color : color0 ;

        tex2d_t u_tex_0 ;
        tex2d_t u_tex_1 ;
        tex2d_t u_tex_2 ;
        tex2d_t u_tex_3 ;

        void main()
        {
            out.color = vec4_t(0.5,0.5,0.5,1.0) ;

            if( in.tx.x < 0.5 && in.tx.y > 0.5 )
            {
                vec2_t tx = (in.tx - vec2_t( 0.0, 0.5 ) ) * 2.0 ; 
                out.color = rt_texture( u_tex_0, tx ) ; 
            }
            else if( in.tx.x > 0.5 && in.tx.y > 0.5 )
            {
                vec2_t tx = (in.tx - vec2_t( 0.5, 0.5 ) ) * 2.0 ; 
                out.color = rt_texture( u_tex_1, tx ) ; 
            }
            else if( in.tx.x > 0.5 && in.tx.y < 0.5 )
            {
                vec2_t tx = (in.tx - vec2_t( 0.5, 0.0 ) ) * 2.0 ; 
                out.color = vec4_t( rt_texture( u_tex_2, tx ).xyz, 1.0 ); 
            }
            else if( in.tx.x < 0.5 && in.tx.y < 0.5 )
            {
                vec2_t tx = (in.tx - vec2_t( 0.0, 0.0 ) ) * 2.0 ; 
                float_t p = pow( rt_texture( u_tex_3, tx ).r, 2.0 ) ;
                out.color = vec4_t( vec3_t( p, p, p ), 1.0 ); 
            }
        }
    }
}