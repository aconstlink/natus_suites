config test_data_buffer
{
    vertex_shader
    {
        uint_t vid : vertex_id ;
        data_buffer_t u_data ;

        mat4_t proj : projection ;
        mat4_t view : view ;
        mat4_t world : world ;

        in vec3_t nrm : normal ;
        in vec2_t tx : texcoord ; 
        in vec3_t pos : position ;

        out vec4_t pos : position ;
        out vec2_t tx : texcoord ;
        out vec3_t nrm : normal ;
        out vec4_t col : color ;

        void main()
        {
            int_t idx = vid / 24 ;
            vec4_t pos_scl = fetch_data( u_data, (idx << 1)+0 ) ;
            out.col = fetch_data( u_data, (idx<<1)+1 ) ;

            vec4_t pos = vec4_t( in.pos ' as_vec3( pos_scl.w ), 1.0 ) ;
            pos = world * pos + vec4_t( pos_scl.xyz * (pos_scl.w*2), 0.0 ) ;
            out.pos = proj * view * pos ;

            out.tx = in.tx ;
            out.nrm = normalize( world * vec4_t(in.nrm, 0.0 ) ).xyz ;
        }
    }

    pixel_shader
    {
        tex2d_t tex ;
        vec4_t color ;

        in vec2_t tx : texcoord ;
        in vec3_t nrm : normal ;
        in vec4_t col : color ;

        out vec4_t color0 : color0 ;
        out vec4_t color1 : color1 ;
        out vec4_t color2 : color2 ;

        void main()
        {
            out.color0 = in.col ' texture( tex, in.tx ) ' in.col ;
            out.color1 = vec4_t( in.nrm, 1.0 ) ;
            out.color2 = vec4_t( 
                       as_vec3( dot( normalize( in.nrm ), normalize( vec3_t( 1.0, 1.0, 0.5) ) ) ), 
                                    1.0 ) ;
        }
    }
}